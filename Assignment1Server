#include<stdio.h>
#include<netinet/in.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netdb.h>
#include<stdlib.h>
#include<string.h>
#define MAX 80
#define PORT 43454
#define SA struct sockaddr

void func(int newsockfd)
{
   int n;
   /* buffer to store the data received from the client */
   char bufferread[MAX];
   /* buffer contains data to be sent from the server */
   char bufferwrite[MAX];
   for(;;)
   {
      /* bzero function places nbyte null bytes in the buffer */
      bzero(bufferread,MAX);
      bzero(bufferwrite,MAX);

     /* system call to read data from the client */
     read(newsockfd,bufferread,sizeof(bufferread));
    /* displaying the message received from the client */
    printf(“From client: %s”,bufferread);

    /* entering message to the client */
    printf(“\t To client : “);
    bzero(bufferwrite,MAX);
    n=0;
    while((bufferwrite[n++]=getchar())!=’\n’);
    /* sending message to the client using system call write */
    write(newsockfd,bufferwrite,sizeof(bufferwrite));

    /* if client exit */
    if(strncmp(“exit”,bufferread,4)==0)
    {
       return; 
    }

    /* if server exit */
    if(strncmp(“exit”,bufferwrite,4)==0)
    {
       printf(“Server Exit…\n”);
       break;
    }
  }
}

int main()
{
   int sockfd,newsockfd,len,pid;
   long int addr;
   struct sockaddr_in servaddr,cli;
   /* creating socket using system call socket */
   sockfd=socket(AF_INET,SOCK_STREAM,0);

   if(sockfd==-1)
   {
      printf(“socket creation failed…\n”);
      exit(0);
   }
   else
      printf(“Socket successfully created..\n”);

   /* bzero function places nbyte null bytes in servaddr */
   bzero(&servaddr,sizeof(servaddr));
   servaddr.sin_family=AF_INET;
   servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
   servaddr.sin_port=htons(PORT);
   /* system call bind to associate socket with local address */
   if((bind(sockfd,(SA*)&servaddr, sizeof(servaddr)))!=0)
   {
      printf(“socket bind failed…\n”);
      exit(0);
   }
   else
      printf(“Socket successfully binded..\n”);

   /* system call listen to enqueue connection requests */
   if((listen(sockfd,5))!=0)
   {
      printf(“Listen failed…\n”);
      exit(0);
   }
   else
      printf(“Server listening..\n”);

   /* to allow server for multiple simultaneous connections */
   while(1)
   { 
      len=sizeof(cli);
      /* accept system call to accept a connection request from a client */
      newsockfd=accept(sockfd,(SA *)&cli,&len);
      if(newsockfd<0)
      {
         printf(“server acccept failed…\n”);
         exit(0);
      }
      else
         printf(“server acccept the client…\n”);
      /* Create child process */
      pid = fork();
      if (pid < 0)
      {
         perror(“ERROR on fork”);
         exit(1);
      }
      /* child process */
      if (pid == 0) 
      {
         /* closes the socket */
         close(sockfd);
         func(newsockfd);
         exit(0);
       }
       else
       {
          /* closes the socket */
          close(newsockfd);
       }
    }
}
